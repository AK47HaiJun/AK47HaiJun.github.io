{"meta":{"title":"Mr.Zhang Xin","subtitle":"前端，我一直在路上","description":"只有钻研一个方向，并深入，那么你就会是这方面的专家。","author":"Mr.DaXin","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-11-11T16:01:10.000Z","updated":"2018-11-11T16:01:11.034Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-11-11T16:07:00.000Z","updated":"2018-11-11T16:07:00.500Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-11-11T16:08:29.000Z","updated":"2018-11-11T16:08:29.158Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2018-11-11T16:09:45.000Z","updated":"2018-11-11T16:09:45.184Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue学习笔记","slug":"Vue","date":"2018-11-25T07:29:41.000Z","updated":"2018-11-25T07:38:01.634Z","comments":true,"path":"2018/11/25/Vue/","link":"","permalink":"http://yoursite.com/2018/11/25/Vue/","excerpt":"最近学习了Vue，Vue的出现简化 了很多代码步骤，Vue最强大的就是双向数据绑定。什么是Vue？Vue是一套用于构建用户界面的渐进式框架。它的核心是视图层，它在前端MVVM 中的角色是 VM . 它是调度者，它分割了M和V。如果V（视图层）想要取数据，那么它会通过VM 到 M 层去取数据；存储数据，VM会将V层的数据存储到M层。VM是M层和V层沟通的桥梁","text":"最近学习了Vue，Vue的出现简化 了很多代码步骤，Vue最强大的就是双向数据绑定。什么是Vue？Vue是一套用于构建用户界面的渐进式框架。它的核心是视图层，它在前端MVVM 中的角色是 VM . 它是调度者，它分割了M和V。如果V（视图层）想要取数据，那么它会通过VM 到 M 层去取数据；存储数据，VM会将V层的数据存储到M层。VM是M层和V层沟通的桥梁 Vue主要是以Vue内置命令驱动，这是我根据Vue官方总结的一份学习资料，特别适合新手入门学习 声明式渲染12345// HTML &lt;div id=\"fade\"&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; &lt;h1&gt;&#123;&#123;hh&#125;&#125;&lt;/h1&gt; &lt;/div&gt; 1234567891011&lt;script&gt; var ss = new Vue(&#123; el: '#fade', // el 控制对象的区域 data: &#123; // data是渲染的数据 msg: '测试Vue使用', hh: '测试踩踩踩踩踩踩踩踩踩踩踩踩踩踩踩' &#125; &#125;) &lt;/script&gt; 小结：声明式渲染主要是 在Vue对象 data中指定属性，然后在HTML代码中使用&#123;&#123;data中的属性&#125;&#125;，这样就达到了渲染，是不是很简单。 条件于循环v-if 条件的使用123456&lt;div id=\"fade\"&gt;&lt;input type=\"button\" value=\"隐藏\" @click=\"flag!=flag\"&gt;&lt;p v-if=\"flag\"&gt;测试显示&lt;/p&gt; // 如果flag在data中定义false，则那么它就不会显示&lt;p v-show=\"flag\"&gt;测试显示&lt;/p&gt;&lt;/div&gt; 123456789101112131415161718192021&lt;script&gt; var sc = new Vue(&#123; el:\"#fade\", data:&#123; flag:true //指定v-if 如何显示 &#125; &#125;)&lt;/script&gt;``` **&lt;font color=red&gt;v-for 循环的使用** ```html &lt;div id=\"fade\"&gt; id:&lt;input type=\"text\" v-model=\"id\"&gt;name:&lt;input type=\"text\" v-model=\"name\"&gt;&lt;input type=\"button\" value=\"添加\" @click=\"add\"&gt; &lt;p v-for=\"item in list\" :key=\"item.id\"&gt; &lt;input type=\"checkbox\" &gt;id:&#123;&#123;item.id&#125;&#125;-------name:&#123;&#123;item.name&#125;&#125; &lt;/p&gt; // v-for=\"变量 in 数组/对象\" //然后在想插入的标签中 &#123;&#123;item.数组的属性&#125;&#125; -----这样就把数组中的数据取到了 //:key的作用是：记录当前数据状态，不会被覆盖--------它常于v-for搭配使用 key 管理可复用的元素 &lt;/div&gt; 1234567891011121314151617181920212223242526&lt;script&gt; var ss = new Vue(&#123; el:\"#fade\", data:&#123; id:\"\", name:\"\", list:[ &#123;id: 1 , name:\"张三\"&#125;, &#123;id: 2 , name:\"李四\"&#125;, &#123;id: 3 , name:\"王五\"&#125;, &#123;id: 4 , name:\"超人\"&#125;, &#123;id: 5 , name:\"小明\"&#125; ], &#125; , methods:&#123; add()&#123; // 添加一行 //this.list.push(&#123;id:this.id,name:this.name&#125;) 在数组末尾追加一个对象 this.list.unshift(&#123;id:this.id,name:this.name&#125;) &#125; &#125; &#125;);&lt;/script&gt;小结：v-for循环时,key属性只能是number或者 string使用key时,必须用 v-bind 绑定指定key的值, 它用于保存当前选中 组件应用构建什么是组件？ Vue官方定义：组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。简单的说 组件：它就是一个页面的一小部分，它有特殊功能供用户使用（计算求和，查询火车票…），它可以根据开发者自定义开发功能供用户方便使用。 组件的注册以及使用全局注册1234567Vue.component('item-ss',&#123;// item-ss 是自己定义的组件标签 props:['phone'], //给组件添加一个新的属性 template:'&lt;li&gt;&#123;&#123;phone.name&#125;&#125;-----&#123;&#123;phone.prise&#125;&#125;&lt;/li&gt;'// template是按什么形式显示在页面 &#125;)var ss = new Vue(&#123; el:'#fade', &#125;) 12345678&lt;div id=\"fade\"&gt; //使用在组件中自定义的组件 // 以下这步骤是： 先遍历shop数组 然后将遍历后的item 绑定在组件添加的新的组件上， 最后它会按template中的内容输出 &lt;item-ss v-for=\"item in shop\" :phone=\"item\"&gt;&lt;/item-ss&gt;&lt;/div&gt;小结：全局注册： 它是在Vue对象外注册 局部注册12345678910111213141516171819202122232425262728var aa = &#123; props:['phone'], template:'&lt;li&gt;&#123;&#123;phone.name&#125;&#125;-----&#123;&#123;phone.prise&#125;&#125;&lt;/li&gt;'// template是按什么形式显示在页面 &#125;;var ss = new Vue(&#123; el:'#fade', data:&#123; boo:false, content:\"\", shop:[ &#123;name:\"Iphone8\",prise:5000&#125;, &#123;name:\"Iphone9\",prise:7000&#125;, &#123;name:\"IphoneX MAX\",prise:10000&#125;, ] &#125;, // 这部分要 components components:&#123; 'phone-item':aa //组件名(标签名)：用到的js对象 // 这个phone-item的作用域只会在Vue实例中生效 &#125; &#125;)小结： 局部注册: 它是在Vue对象内部定义 计算属性和侦听器计算属性12345678910111213141516171819202122232425&lt;script&gt; Vue.component('item-ss',&#123;// item-ss 是自己定义的组件标签 props:['phone'], //给组件添加一个新的属性 template:'&lt;li&gt;&#123;&#123;phone.name&#125;&#125;-----&#123;&#123;phone.prise&#125;&#125;&lt;/li&gt;'// template是按什么形式显示在页面 &#125;) var ss = new Vue(&#123; el:'#fade', data:&#123; boo:false, prise:15000 &#125;, computed:&#123; half_Off:function()&#123; return this.prise*7 &#125;, ChinaRmb:function()&#123; return (this.half_Off)/3 &#125; &#125; &#125;)//计算属性（computed）：它是处理发杂的逻辑&lt;/script&gt; 什么是计算属性（computed）？ 12处理一些发杂的逻辑时，内容就放在computed中 侦听属性1234567watch:&#123; price:function()&#123; //只要price值变了，就会执行watch下的相应操作 this.half_Off = this.price*7 this.ChinaRmb = this.half_Off/4 &#125;&#125; 什么是侦听属性（watch）？ 12当侦听的属性发生了变化，那么watch中的内容就发生变化 class与Style绑定class使用的几种方法12345678910&lt;div id=\"fade\"&gt; &lt;!-- 通过数组方式添加样式 【‘样式名’】 --&gt; 这里的样式名是提前在CSS中定义好的， 使用v-bind=class绑定使用 &lt;h1 :class=\"['size', 'color',boo?'big':'weight']\"&gt;添加样式&lt;/h1&gt; &lt;hr&gt; &lt;!-- 通过添加对象的方式进行判断 &#123;‘样式名’,布尔值变量&#125; --&gt; &lt;h1 :class=\"[ 'color',&#123;'big':boo&#125;]\"&gt;添加样式&lt;/h1&gt; &lt;hr&gt; &lt;!-- 直接通过对象改变属性 &#123;属性名:布尔值&#125; --&gt; &lt;h1 :class=\"&#123;color:true, size:true&#125;\"&gt;测试直接使用对象该样式&lt;/h1&gt; &lt;/div&gt; 123456789&lt;script&gt; var ss = new Vue(&#123; el: '#fade', data:&#123; boo:true &#125; &#125;)&lt;/script&gt; style使用几种方法1234567&lt;div id=\"fade\"&gt; &lt;!-- 通过往style中传入对象改变样式 缺点不能传多个对象 --&gt; &lt;h3 :style=\"ss\"&gt;测试行十四说水水&lt;/h3&gt; &lt;hr&gt; &lt;!-- 通过往style中传入数组，在数组中可以放多个对象 --&gt; &lt;h3 :style=\"[yy , dd]\"&gt;测试行水&lt;/h3&gt; &lt;/div&gt; 12345678910111213&lt;script&gt; var ss = new Vue(&#123; el: '#fade', data:&#123; ss:&#123;color:'red','font-size':\"50px\"&#125;, dd:&#123;\"font-weight\":900&#125;, yy:&#123;color:'blue','font-size':\"30px\"&#125;, &#125; &#125;) &lt;/script&gt; 条件渲染（if，if-else，if-else if，else）123456789&lt;div id=\"fade\"&gt; &lt;h2&gt;考试成绩&lt;/h2&gt; &lt;h1&gt;&#123;&#123;msg&#125;&#125;🍗🍗🍗🍗🍗&lt;/h1&gt; &lt;h1 v-if=\"msg == 0\"&gt; 请点击查询成绩&lt;/h1&gt; &lt;h1 v-else-if=\"msg&lt;60\"&gt;孩子考的不错，会家要红包去吧&lt;/h1&gt; &lt;h1 v-else-if=\"msg&lt;80&amp;&amp;msg&gt;60\"&gt;孩子，还可以，继续努力&lt;/h1&gt; &lt;h1 v-else&gt;孩子还念啥📕啊，快上班去吧，学霸&lt;/h1&gt; &lt;button @click='find'&gt;查询成绩&lt;/button&gt;&lt;/div&gt; 123456789101112131415&lt;script&gt; var ss = new Vue(&#123; el: '#fade', data:&#123; msg:0 &#125;, methods:&#123; find:function()&#123; return this.msg=Math.round(Math.random()*100) &#125; &#125; &#125;)&lt;/script&gt; 列表的渲染v-for 渲染列表的使用12345678&lt;div v-for=\"(value, key, index) in object\"&gt; &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125; 1.index 是 Object列表的索引 2.key 是 Object列表的属性 3.value 是 Object中key的值 &lt;/div&gt; 表单数据绑定（v-model）1234567891011121314151617181920212223242526&lt;div id=\"fade\"&gt; &lt;h2&gt;你玩过哪些游戏&lt;/h2&gt; &lt;input type=\"radio\" v-model=\"hobby\" value=\"穿越火线\"&gt; &lt;label for=\"穿越火线\"&gt;穿越火线&lt;/label&gt;&lt;br&gt; &lt;input type=\"radio\" v-model=\"hobby\" value=\"QQ飞车\"&gt; &lt;label for=\"QQ飞车\"&gt;QQ飞车&lt;/label&gt;&lt;br&gt; &lt;input type=\"radio\" v-model=\"hobby\" value=\"战地之王\"&gt; &lt;label for=\"战地之王\"&gt;战地之王&lt;/label&gt;&lt;br&gt; &lt;h2&gt;你的性别是&lt;/h2&gt; &lt;input type=\"radio\" v-model=\"sex\" value=\"男\"&gt; &lt;label for=\"QQ飞车\"&gt;男&lt;/label&gt;&lt;br&gt; &lt;input type=\"radio\" v-model=\"sex\" value=\"女\"&gt; &lt;label for=\"战地之王\"&gt;女&lt;/label&gt;&lt;br&gt; &lt;h2&gt;你的职业是&lt;/h2&gt; &lt;input type=\"radio\" v-model=\"profession\"value=\"学生\"&gt; &lt;label for=\"QQ飞车\"&gt;学生&lt;/label&gt;&lt;br&gt; &lt;input type=\"radio\" v-model=\"profession\" value=\"码农\"&gt; &lt;label for=\"战地之王\"&gt;码农&lt;/label&gt;&lt;br&gt; &lt;hr&gt; &lt;p&gt;你的性别是：&#123;&#123;sex&#125;&#125;&lt;/p&gt; &lt;p&gt;你的爱好是：&#123;&#123;hobby&#125;&#125;&lt;/p&gt; &lt;p&gt;你的职业是：&#123;&#123;profession&#125;&#125;&lt;/p&gt; &lt;/div&gt; 1234567891011121314&lt;script&gt; var ss = new Vue(&#123; el:'#fade', data:&#123; hobby:\"\", sex:\"\", profession:\"\" &#125;, &#125;)//单选框：radio上 绑定value值， 当选中该值 ， 存入 data中定义的属性&lt;/script&gt; 12以上是Vue的基础部分，进阶部分在接下来的时间会去学习！相信你可以很容易看懂这些例子吧，Vue使用真的很方便！ 点击即可找到我的个人博客或者关注我CSDN博客，我都会更新博客","categories":[],"tags":[{"name":"Vue基础","slug":"Vue基础","permalink":"http://yoursite.com/tags/Vue基础/"}]},{"title":"MVVM笔记","slug":"MVVM","date":"2018-11-13T13:06:46.071Z","updated":"2018-11-25T07:29:11.295Z","comments":true,"path":"2018/11/13/MVVM/","link":"","permalink":"http://yoursite.com/2018/11/13/MVVM/","excerpt":"简述MVVM","text":"简述MVVM ##MVVM ###什么是MVVM ？ ‘’’MVVM是Model-View-ViewModel的简写.它是前端视图层的分层开发思想，其中VM是MVVM的核心。因为它是M和V之间的调度者，通过VM来取数据和存数据‘’’ ###详细说一下M V VM 的含义 ‘’’M： 它保存的是每个页面中的单独数据.VM： 它是调度者，它分割了M和V。如果V（视图层）想要取数据，那么它会通过VM 到 M 层去取数据；存储数据，VM会将V层的数据存储到M层。 VM是M层和V层沟通的桥梁 V：它是HTML页面结构。‘’’ ##简述总结 M：它是数据访问层 VM：它是业务逻辑层和数据调度者。 V：视图显示层 ##MVVM主要目的 它主要是分离视图V和模型M","categories":[],"tags":[{"name":"MVVM","slug":"MVVM","permalink":"http://yoursite.com/tags/MVVM/"}]},{"title":"Ajax  学习总结","slug":"Ajax","date":"2018-11-11T04:01:21.548Z","updated":"2018-11-12T15:30:52.792Z","comments":true,"path":"2018/11/11/Ajax/","link":"","permalink":"http://yoursite.com/2018/11/11/Ajax/","excerpt":"我的第一篇博客文，最近学Ajax，断断续续学了两周，其实一周就可以搞定的，中间有很多琐事，一直拖到现在才完成。学习Ajax过程中遇到很多坑，到现在还没有解决，解析JSON数据，我已经知道了大概解析JSON数据的流程。准备把这两周学习的知识做个总结吧！","text":"我的第一篇博客文，最近学Ajax，断断续续学了两周，其实一周就可以搞定的，中间有很多琐事，一直拖到现在才完成。学习Ajax过程中遇到很多坑，到现在还没有解决，解析JSON数据，我已经知道了大概解析JSON数据的流程。准备把这两周学习的知识做个总结吧！ Ajax大纲Ajax简单介绍1. Ajax：AsynchronousJavascriptAndXml(异步JavaScirpt和XML) 2. Ajax主要作用：实现页面的局部刷新和异步刷新 3. Ajax主要应用： s 表单验证和页面请求数据 Ajax Get Post 请求 如何创建Ajax请求方式 1. GET请求 2. POST请求 GET请求创建 var xhr = new XMLHttpRequest(); xhr.open(‘get’,”脚本文件”); xhr.send(null); xhr.onload=function(){ console.log(xhr.responseText) } GET数据的获取是通过在脚本文件？后面拼数据 POST请求 var xhr = new XMLHttpRequest(); xhr.open(‘get’,”脚本文件?参数=”+value); xhr.send(null) xhr.onreadystatechange=function(){ if(xhr.readyState == 4 &amp;&amp; xhr.status == 200){ var result = xhr.responseText; console.log(reslut)} } Ajax 如何请求解析json数据 和 xml数据1. **解析json数据** 将JSON数据字符串转化为对象 然后通过遍历 获取具体数据， 对象[属性] 2. **解析XML数据** Ajax4个步骤张 请求数据格式是 **xhr.responseXML** 然后通过标签选择器遍历 jQuery Ajax使用jQuery Ajax已经自己封装好了Ajax，可以直接方便的使用。使用格式 $.ajax() 代码撸上 $.ajax({ url:请求地址, type:请求类型 get/post, data:{ 请求参数名：请求参数值 }, async:请求方式 true 异步请求，false同步请求， dataType：请求数据类型 &quot;text&quot;/&quot;JSON&quot;/&quot;xml&quot;, success:function(result){ 获取请求到得数据逻辑 } }) jQuery Ajax 解析JSON数据和XML数据jQuer Ajax 请求JSON数据和XML数据和Ajax请求方式是一样的 模板引擎什么是模板引擎呢？ 它是快速生成HTML，并渲染到页面上。 如何使用模板引擎呢？ 1. 首先需要导入一个template.js文件 2. 在生成一个 &lt;script type=&quot;text/html&quot; id=&quot;模板引擎id&quot;&gt; HTML片段 &lt;/script&gt; 3. 在另一个 &lt;script&gt; var html =template(&apos;&quot;模板ID&quot;，”传递模板数据“) &lt;/script&gt; 这个模板数据是对象或者请求的数据 为何要使用它呢 它提供了后期维护方便快捷 跨域的了解和同源策略什么是跨域 通俗易懂的说就是访问别人的数据库。它就是服务器返回一个方法调用，这个方法是我们事先定义的，而方法中参数就是我们要的数据。 同源策略 为什么要说它？ 它是浏览器为保证安全实施的安全机制。Ajax默认是可以获取到同源的数据，非同源的数据获取不到。 什么是同源和非同源呢？ 协议 域名 端口 这三个都相同，那么它就是同源策略。---------那么它就可以直接使用Ajax4个步骤访问数据了 非同源就得使用跨域访问数据了 如何使用跨域呢？ 跨域的使用: jQuary 跨域的使用 $.ajax({ url: 接口文档， data:{ 业务逻辑参数 } jsonp:指定回调函数 接口文档会有 dataType:&apos;jsonp&apos; 请求类型为 jsonp才能获取到跨域内容 success:function(data){ var html = template(&apos;引擎模板id&apos;,data) 指定地方.html（html） ------------添加数据 } }) 跨域分为两种情况 1. 一种请求数据是jsonp 2. 另一种请求数据是json 获取数据三种方法 通过Ajax 4个步骤————-访问的是自己的数据库 通过跨域，动态创建script，如果返回的数据类型是jsonp————那么就可以访问的是第三方数据库 通过跨域，动态创建script，如果返回的数据类型不是jsonp———-那么需要在自己的后端语言读取url，并返回，然后在通过Ajax4个步骤访问数据即可 只有在同源的情况下，才可以用Ajax方法问，如果是非同源情况，那么只能用跨域访问 以上就是Ajax的总结解析吧，如果博文中哪处有错或者不懂，可以私信我QQ：1325190062","categories":[],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"http://yoursite.com/tags/Ajax/"}]}]}